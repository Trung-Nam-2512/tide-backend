const express = require('express');
const router = express.Router();
const tideController = require('../controllers/tideController');
const tideRealyController = require('../controllers/tideRealyController');
const { getSchedulerStatus, fetchAllStationsData } = require('../scheduler/tideDataScheduler');

// API v1 routes
router.get('/fetch-tide-forecast-data', tideController.triggerFetchTideData); // l·∫•y d·ªØ li·ªáu t·ª´ api
router.get('/get-tide-forecast-data', tideController.getTideData);// l·∫•y d·ªØ li·ªáu t·ª´ database
router.get('/get-tide-data-from-now', tideController.getTideDataFromNow); // l·∫•y d·ªØ li·ªáu t·ª´ api
router.get('/get-recent-tide-data', tideController.getRecentTideData); // l·∫•y d·ªØ li·ªáu t·ª´ database
router.get('/get-locations', tideController.getLocations); // l·∫•y danh s√°ch c√°c tr·∫°m
router.get('/health', tideController.healthCheck); // ki·ªÉm tra t√¨nh tr·∫°ng server
router.get('/get-tide-realy-data', tideRealyController.getTideRealyController); // l·∫•y d·ªØ li·ªáu th·ªßy tri·ªÅu th·ª±c t·∫ø t·ª´ API (v·ªõi cache)
router.get('/get-tide-realy-data-db', tideRealyController.getTideRealyFromDBController); // l·∫•y d·ªØ li·ªáu th·ªßy tri·ªÅu th·ª±c t·∫ø t·ª´ database
router.get('/get-tide-realy-data-force', tideRealyController.getTideRealyForceController); // force refresh d·ªØ li·ªáu t·ª´ API
router.get('/cache-status', tideRealyController.getCacheStatusController); // xem tr·∫°ng th√°i cache
router.post('/update-station-code', tideRealyController.updateStationCodeController); // c·∫≠p nh·∫≠t station code v√†o tideModel
router.get('/get-combined-tide-data', tideController.getCombinedTideData); // l·∫•y c·∫£ d·ªØ li·ªáu d·ª± b√°o v√† th·ª±c ƒëo

// Scheduler endpoints
router.get('/scheduler-status', (req, res) => { // xem tr·∫°ng th√°i c·ªßa scheduler
    try {
        const status = getSchedulerStatus();
        res.json({
            success: true,
            data: status,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: 'Failed to get scheduler status',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

router.post('/trigger-scheduled-fetch', async (req, res) => { // g·ªçi l·ªãch thu th·∫≠p t·∫•t c·∫£ d·ªØ li·ªáu th·ªßy tri·ªÅu th·ª±c t·∫ø t·ª´ API 
    try {
        console.log('üîÑ Manual trigger for scheduled fetch...');
        const results = await fetchAllStationsData();
        res.json({
            success: true,
            data: results,
            message: 'Scheduled fetch completed',
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: 'Failed to trigger scheduled fetch',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// GET endpoint to trigger fetching real tide data for ALL stations immediately
router.get('/fetch-tide-realy-all', async (req, res) => { // l·∫•y d·ªØ li·ªáu th·ªßy tri·ªÅu Endpoint m·ªõi ‚Äì GET ƒë·ªÉ l·∫•y d·ªØ li·ªáu cho T·∫§T C·∫¢ tr·∫°m ngay l·∫≠p t·ª©c
    try {
        console.log('üîÑ Manual trigger (GET) for fetching real tide data for all stations...');
        const results = await fetchAllStationsData();
        res.json({
            success: true,
            data: results,
            message: 'Fetched tide real data for all stations',
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: 'Failed to fetch tide real data for all stations',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Legacy routes for backward compatibility
// router.get('/', tideController.triggerFetchTideData);

module.exports = router;