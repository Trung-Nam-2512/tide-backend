const cron = require('node-cron');
const { fetchAndSaveAllMekongData, getMekongStats } = require('../services/mekongService');

/**
 * Scheduler ƒë·ªÉ t·ª± ƒë·ªông fetch d·ªØ li·ªáu Mekong API m·ªói 1 gi·ªù
 * T∆∞∆°ng t·ª± nh∆∞ c√°c scheduler kh√°c trong h·ªá th·ªëng
 */

/**
 * Fetch d·ªØ li·ªáu Mekong t·ª´ API
 */
const fetchMekongDataScheduled = async () => {
    console.log('üåä B·∫Øt ƒë·∫ßu fetch d·ªØ li·ªáu Mekong theo l·ªãch tr√¨nh...');
    console.log(`‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' })}`);

    try {
        const result = await fetchAndSaveAllMekongData();

        if (result.success) {
            console.log(`‚úÖ Mekong scheduler: ${result.totalDataPoints || result.dataPoints} records ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng`);
            console.log(`üìä K·∫øt qu·∫£: ${result.successCount}/${result.totalStations} stations th√†nh c√¥ng`);

            return {
                success: true,
                totalDataPoints: result.totalDataPoints || result.dataPoints,
                successCount: result.successCount,
                totalStations: result.totalStations,
                results: result.results,
                message: result.message,
                timestamp: new Date().toISOString()
            };
        } else {
            console.log(`‚ùå Mekong scheduler: ${result.message}`);
            return {
                success: false,
                message: result.message,
                error: result.error,
                timestamp: new Date().toISOString()
            };
        }

    } catch (error) {
        console.error('‚ùå L·ªói trong Mekong scheduler:', error.message);
        return {
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
};

/**
 * Kh·ªüi t·∫°o Mekong Scheduler
 */
const initMekongScheduler = () => {
    console.log('üöÄ Kh·ªüi t·∫°o Mekong Data Scheduler...');

    // L·ªãch tr√¨nh g·ªçi API: m·ªói 1 gi·ªù t·∫°i ph√∫t th·ª© 0
    // Cron expression: 0 * * * * (ph√∫t gi·ªù ng√†y th√°ng th·ª©)
    const cronExpression = '0 * * * *';

    console.log(`‚è∞ L·ªãch tr√¨nh: ${cronExpression} (m·ªói 1 gi·ªù GMT+7)`);
    console.log(`üåä D·ªØ li·ªáu: Mekong water level data`);
    console.log(`üîó API: S·ª≠ d·ª•ng URL_API_MEKONG t·ª´ environment`);

    // T·∫°o cron job cho vi·ªác fetch d·ªØ li·ªáu Mekong
    const mekongJob = cron.schedule(cronExpression, async () => {
        console.log('üîî ƒê√£ ƒë·∫øn gi·ªù fetch d·ªØ li·ªáu Mekong!');
        await fetchMekongDataScheduled();
    }, {
        scheduled: true,
        timezone: "Asia/Ho_Chi_Minh"
    });

    // Fetch d·ªØ li·ªáu ngay l·∫≠p t·ª©c khi kh·ªüi ƒë·ªông (sau 15 gi√¢y)
    // Delay l√¢u h∆°n m·ªôt ch√∫t so v·ªõi c√°c service kh√°c ƒë·ªÉ tr√°nh conflict
    console.log('üöÄ S·∫Ω fetch d·ªØ li·ªáu Mekong sau 15 gi√¢y...');
    setTimeout(async () => {
        console.log('üé¨ Fetch d·ªØ li·ªáu Mekong l·∫ßn ƒë·∫ßu...');
        await fetchMekongDataScheduled();
    }, 15000); // Delay 15 gi√¢y

    console.log('‚úÖ Mekong Data Scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!');

    return { mekongJob };
};

/**
 * D·ª´ng Mekong Scheduler
 */
const stopMekongScheduler = (mekongJob) => {
    if (mekongJob) {
        mekongJob.stop();
        console.log('‚èπÔ∏è Mekong Data Scheduler ƒë√£ ƒë∆∞·ª£c d·ª´ng.');
    }
};

/**
 * L·∫•y th√¥ng tin tr·∫°ng th√°i scheduler
 */
const getMekongSchedulerStatus = () => {
    return {
        isRunning: true,
        dataType: 'mekong_water_level',
        schedule: '0 * * * *',
        timezone: 'Asia/Ho_Chi_Minh',
        description: 'M·ªói 1 gi·ªù (0 ph√∫t c·ªßa m·ªói gi·ªù) GMT+7',
        apiSource: 'URL_API_MEKONG',
        dataFields: ['date_gmt', 'val', 'ft', 'as', 'av', 'P', 'lineColor'],
        method: 'fetchAndSaveMekongData',
        replaceStrategy: true,
        retryMechanism: 'Built-in exponential backoff (3 attempts)'
    };
};

/**
 * Fetch d·ªØ li·ªáu ngay l·∫≠p t·ª©c (manual trigger)
 */
const fetchMekongDataNow = async () => {
    console.log('üîß Manual trigger: Fetch d·ªØ li·ªáu Mekong ngay l·∫≠p t·ª©c...');
    return await fetchMekongDataScheduled();
};

/**
 * L·∫•y th·ªëng k√™ d·ªØ li·ªáu Mekong hi·ªán t·∫°i
 */
const getMekongSchedulerStats = async () => {
    try {
        console.log('üìä ƒêang l·∫•y th·ªëng k√™ Mekong scheduler...');
        const stats = await getMekongStats();

        return {
            success: true,
            stats: stats,
            scheduler: getMekongSchedulerStatus(),
            timestamp: new Date().toISOString()
        };
    } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y th·ªëng k√™ Mekong scheduler:', error.message);
        return {
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
};

/**
 * Ki·ªÉm tra health c·ªßa Mekong scheduler
 */
const checkMekongSchedulerHealth = async () => {
    try {
        const stats = await getMekongStats();
        const status = getMekongSchedulerStatus();

        // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu g·∫ßn ƒë√¢y kh√¥ng (trong 2 gi·ªù qua)
        const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000);
        const isDataRecent = stats.dateRange?.to && new Date(stats.dateRange.to) > twoHoursAgo;

        return {
            success: true,
            status: 'healthy',
            scheduler: {
                isRunning: status.isRunning,
                lastScheduleRun: 'N/A', // Cron job kh√¥ng track n√†y
                nextScheduleRun: 'Next hour at minute 0'
            },
            data: {
                totalRecords: stats.totalRecords,
                hasRecentData: isDataRecent,
                lastDataUpdate: stats.lastUpdate,
                dateRange: stats.dateRange
            },
            timestamp: new Date().toISOString()
        };

    } catch (error) {
        return {
            success: false,
            status: 'unhealthy',
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
};

module.exports = {
    initMekongScheduler,
    stopMekongScheduler,
    getMekongSchedulerStatus,
    fetchMekongDataScheduled,
    fetchMekongDataNow,
    getMekongSchedulerStats,
    checkMekongSchedulerHealth
};
