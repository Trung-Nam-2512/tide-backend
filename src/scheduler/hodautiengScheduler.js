const cron = require('node-cron');
const MucnuochoService = require('../services/tideHoDauTieng');
const QdenService = require('../services/qdenHoDauTiengService');
const LuuluongxaService = require('../services/luuluongxaService');
const { getRetryConfig } = require('../config/retryConfig');

/**
 * Scheduler ƒë·ªÉ t·ª± ƒë·ªông fetch d·ªØ li·ªáu H·ªì D·∫ßu Ti·∫øng m·ªói 1 ti·∫øng
 * Bao g·ªìm: M·ª±c n∆∞·ªõc h·ªì, L∆∞u l∆∞·ª£ng n∆∞·ªõc, L∆∞u l∆∞·ª£ng x·∫£
 */

/**
 * T·∫°o payload m·∫∑c ƒë·ªãnh cho t·ª´ng lo·∫°i d·ªØ li·ªáu
 */
const createDefaultPayloads = () => {
    // L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù +7 (Asia/Ho_Chi_Minh)
    const now = new Date();
    const vietnamTime = new Date(now.toLocaleString("en-US", { timeZone: "Asia/Ho_Chi_Minh" }));

    // H√†m format ng√†y theo ƒë·ªãnh d·∫°ng YYYY-M-D H:mm:ss (kh√¥ng padding s·ªë 0)
    const formatDateTimeForAPI = (date) => {
        const day = date.getDate();
        const month = date.getMonth() + 1;
        const year = date.getFullYear();
        const hours = date.getHours();
        const minutes = date.getMinutes();
        const seconds = date.getSeconds();
        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    };

    // endDate l√† ng√†y hi·ªán t·∫°i 
    const endDateTime = new Date(vietnamTime);
    const endDate = formatDateTimeForAPI(endDateTime);

    // startDate l√† 3 
    const startDateTime = new Date(vietnamTime);
    startDateTime.setDate(startDateTime.getDate() - 3);
    const startDate = formatDateTimeForAPI(startDateTime);

    // endDate_3days l√† 3 ng√†y sau 
    const endDate3DaysDateTime = new Date(vietnamTime);
    endDate3DaysDateTime.setDate(endDate3DaysDateTime.getDate() + 3);
    const endDate_3days = formatDateTimeForAPI(endDate3DaysDateTime);

    console.log(`üìÖ Kho·∫£ng th·ªùi gian fetch: ${startDate} ƒë·∫øn ${endDate} (GMT+7)`);
    console.log(`üìÖ T·ªïng c·ªông: ${Math.ceil((vietnamTime - startDateTime) / (1000 * 60 * 60 * 24))} ng√†y`);

    return {
        // Payload cho m·ª±c n∆∞·ªõc h·ªì (tide)
        tidePayload: {
            data: {
                hc_uuid: "613bbcf5-212e-43c5-9ef8-69016787454f",
                tents: "M·ª±c n∆∞·ªõc h·ªì",
                mats: "MUCNUOCHO",
                tungay: startDate,
                denngay: endDate,
                namdulieu: `${vietnamTime.getFullYear()}`,
                namht: vietnamTime.getFullYear(),
                cua: "",
                mact: "613bbcf5-212e-43c5-9ef8-69016787454f"
            },
            token: ""
        },

        // Payload cho l∆∞u l∆∞·ª£ng n∆∞·ªõc (qden)
        qdenPayload: {
            data: {
                hc_uuid: "613bbcf5-212e-43c5-9ef8-69016787454f",
                tents: "D√≤ng ch·∫£y ƒë·∫øn h·ªì",
                mats: "QDEN",
                tungay: startDate,
                denngay: endDate,
                namdulieu: `${vietnamTime.getFullYear()}`,
                namht: vietnamTime.getFullYear(),
                cua: "",
                mact: "613bbcf5-212e-43c5-9ef8-69016787454f"
            },
            token: ""
        },

        // Payload cho l∆∞u l∆∞·ª£ng x·∫£ (luuluongxa)
        luuluongxaPayload: {
            data: {
                hc_uuid: "613bbcf5-212e-43c5-9ef8-69016787454f",
                tents: "T·ªïng l∆∞u l∆∞·ª£ng ra kh·ªèi h·ªì",
                mats: "LUULUONGXA",
                mact: "",
                tungay: startDate,
                denngay: endDate,
                denngaydb: endDate_3days, // fix cho t√¥i + 3 ng√†y sau.
                ngayht: endDate,
                nguondb: "2",
                gioht: "00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20,21,22,23",
                tansuat: 60
            },
            token: ""
        }
    };
};

/**
 * Fetch t·∫•t c·∫£ d·ªØ li·ªáu H·ªì D·∫ßu Ti·∫øng
 */
const fetchAllHoDauTiengData = async () => {
    console.log('üèûÔ∏è B·∫Øt ƒë·∫ßu fetch d·ªØ li·ªáu H·ªì D·∫ßu Ti·∫øng...');
    console.log(`‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' })}`);

    const results = [];
    const payloads = createDefaultPayloads();

    // 1. Fetch m·ª±c n∆∞·ªõc h·ªì (Tide)
    try {
        console.log('üìä ƒêang fetch d·ªØ li·ªáu m·ª±c n∆∞·ªõc h·ªì...');
        const tideResult = await MucnuochoService.fetchAndSave(payloads.tidePayload);

        results.push({
            type: 'mucnuocho',
            success: tideResult.success,
            newRecords: tideResult.newRecords || 0,
            message: tideResult.message || 'Success'
        });

        if (tideResult.success) {
            console.log(`‚úÖ M·ª±c n∆∞·ªõc h·ªì: ${tideResult.newRecords} records m·ªõi`);
        } else {
            console.log(`‚ùå M·ª±c n∆∞·ªõc h·ªì: ${tideResult.message}`);
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi fetch m·ª±c n∆∞·ªõc h·ªì:', error.message);
        results.push({
            type: 'mucnuocho',
            success: false,
            error: error.message
        });
    }

    // 2. Fetch l∆∞u l∆∞·ª£ng n∆∞·ªõc (Qden)
    try {
        console.log('üíß ƒêang fetch d·ªØ li·ªáu l∆∞u l∆∞·ª£ng n∆∞·ªõc...');
        const qdenResult = await QdenService.fetchAndSave(payloads.qdenPayload);

        results.push({
            type: 'qden',
            success: qdenResult.success,
            newRecords: qdenResult.newRecords || 0,
            message: qdenResult.message || 'Success'
        });

        if (qdenResult.success) {
            console.log(`‚úÖ L∆∞u l∆∞·ª£ng n∆∞·ªõc: ${qdenResult.newRecords} records m·ªõi`);
        } else {
            console.log(`‚ùå L∆∞u l∆∞·ª£ng n∆∞·ªõc: ${qdenResult.message}`);
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi fetch l∆∞u l∆∞·ª£ng n∆∞·ªõc:', error.message);
        results.push({
            type: 'qden',
            success: false,
            error: error.message
        });
    }

    // 3. Fetch l∆∞u l∆∞·ª£ng x·∫£ (Luuluongxa)
    try {
        console.log('üö∞ ƒêang fetch d·ªØ li·ªáu l∆∞u l∆∞·ª£ng x·∫£...');
        const luuluongxaResult = await LuuluongxaService.fetchAndSave(payloads.luuluongxaPayload);

        results.push({
            type: 'luuluongxa',
            success: luuluongxaResult.success,
            newRecords: luuluongxaResult.newRecords || 0,
            message: luuluongxaResult.message || 'Success'
        });

        if (luuluongxaResult.success) {
            console.log(`‚úÖ L∆∞u l∆∞·ª£ng x·∫£: ${luuluongxaResult.newRecords} records m·ªõi`);
        } else {
            console.log(`‚ùå L∆∞u l∆∞·ª£ng x·∫£: ${luuluongxaResult.message}`);
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi fetch l∆∞u l∆∞·ª£ng x·∫£:', error.message);
        results.push({
            type: 'luuluongxa',
            success: false,
            error: error.message
        });
    }

    // T√≥m t·∫Øt k·∫øt qu·∫£
    console.log('üìä T√≥m t·∫Øt k·∫øt qu·∫£ fetch H·ªì D·∫ßu Ti·∫øng:');
    const successCount = results.filter(r => r.success).length;
    const totalRecords = results.reduce((sum, r) => sum + (r.newRecords || 0), 0);

    results.forEach(result => {
        if (result.success) {
            console.log(`  ‚úÖ ${result.type}: ${result.newRecords} records m·ªõi`);
        } else {
            console.log(`  ‚ùå ${result.type}: ${result.error || result.message}`);
        }
    });

    console.log(`üéØ T·ªïng k·∫øt: ${successCount}/${results.length} th√†nh c√¥ng, ${totalRecords} records m·ªõi`);

    return {
        success: successCount > 0,
        results,
        totalRecords,
        successCount,
        timestamp: new Date().toISOString()
    };
};

/**
 * Kh·ªüi t·∫°o HoDauTieng Scheduler
 */
const initHoDauTiengScheduler = () => {
    console.log('üöÄ Kh·ªüi t·∫°o HoDauTieng Data Scheduler...');

    // L·ªãch tr√¨nh g·ªçi API: m·ªói 1 ti·∫øng
    // Cron expression: 0 * * * * (ph√∫t gi·ªù ng√†y th√°ng th·ª©)
    const cronExpression = '0 * * * *';

    console.log(`‚è∞ L·ªãch tr√¨nh: ${cronExpression} (m·ªói 1 ti·∫øng GMT+7)`);
    console.log(`üìç D·ªØ li·ªáu: M·ª±c n∆∞·ªõc h·ªì, L∆∞u l∆∞·ª£ng n∆∞·ªõc, L∆∞u l∆∞·ª£ng x·∫£`);

    // Log retry configuration
    const retryConfig = getRetryConfig('hodautieng');
    console.log(`üîÑ Retry config: ${retryConfig.maxRetries} attempts, ${retryConfig.timeout}ms timeout`);

    // T·∫°o cron job cho vi·ªác fetch d·ªØ li·ªáu H·ªì D·∫ßu Ti·∫øng
    const hodautiengJob = cron.schedule(cronExpression, async () => {
        console.log('üîî ƒê√£ ƒë·∫øn gi·ªù fetch d·ªØ li·ªáu H·ªì D·∫ßu Ti·∫øng!');
        await fetchAllHoDauTiengData();
    }, {
        scheduled: true,
        timezone: "Asia/Ho_Chi_Minh"
    });

    // Fetch d·ªØ li·ªáu ngay l·∫≠p t·ª©c khi kh·ªüi ƒë·ªông (sau 10 gi√¢y)
    console.log('üöÄ S·∫Ω fetch d·ªØ li·ªáu H·ªì D·∫ßu Ti·∫øng sau 10 gi√¢y...');
    setTimeout(async () => {
        console.log('üé¨ Fetch d·ªØ li·ªáu H·ªì D·∫ßu Ti·∫øng l·∫ßn ƒë·∫ßu...');
        await fetchAllHoDauTiengData();
    }, 10000); // Delay 10 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o h·ªá th·ªëng ƒë√£ s·∫µn s√†ng

    console.log('‚úÖ HoDauTieng Data Scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!');

    return { hodautiengJob };
};

/**
 * D·ª´ng HoDauTieng Scheduler
 */
const stopHoDauTiengScheduler = (hodautiengJob) => {
    if (hodautiengJob) {
        hodautiengJob.stop();
        console.log('‚èπÔ∏è HoDauTieng Data Scheduler ƒë√£ ƒë∆∞·ª£c d·ª´ng.');
    }
};

/**
 * L·∫•y th√¥ng tin tr·∫°ng th√°i scheduler
 */
const getHoDauTiengSchedulerStatus = () => {
    const retryConfig = getRetryConfig('hodautieng');

    return {
        isRunning: true,
        dataTypes: ['mucnuocho', 'qden', 'luuluongxa'],
        schedule: '0 * * * *',
        timezone: 'Asia/Ho_Chi_Minh',
        description: 'M·ªói 1 ti·∫øng (0 ph√∫t c·ªßa m·ªói gi·ªù) GMT+7',
        location: 'H·ªì D·∫ßu Ti·∫øng',
        uuid: '613bbcf5-212e-43c5-9ef8-69016787454f',
        retryConfig: {
            maxRetries: retryConfig.maxRetries,
            timeout: retryConfig.timeout,
            baseDelay: retryConfig.baseDelay,
            maxDelay: retryConfig.maxDelay,
            description: `Max ${retryConfig.maxRetries} retries, ${retryConfig.timeout}ms timeout, exponential backoff`
        }
    };
};

/**
 * Fetch d·ªØ li·ªáu ngay l·∫≠p t·ª©c (manual trigger)
 */
const fetchHoDauTiengDataNow = async () => {
    console.log('üîß Manual trigger: Fetch d·ªØ li·ªáu H·ªì D·∫ßu Ti·∫øng ngay l·∫≠p t·ª©c...');
    return await fetchAllHoDauTiengData();
};

module.exports = {
    initHoDauTiengScheduler,
    stopHoDauTiengScheduler,
    getHoDauTiengSchedulerStatus,
    fetchAllHoDauTiengData,
    fetchHoDauTiengDataNow
};
