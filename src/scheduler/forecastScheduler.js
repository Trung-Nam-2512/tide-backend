/**
 * Forecast Scheduler - T·ª± ƒë·ªông ƒë·ªìng b·ªô d·ªØ li·ªáu d·ª± b√°o m·ª±c n∆∞·ªõc
 */

const cron = require('node-cron');
const forecastHoDauTiengService = require('../services/forecastHoDauTiengService');
const forecastDataRepository = require('../repositories/forecastDataRepository');

class ForecastScheduler {
    constructor() {
        this.jobs = new Map();
        this.isInitialized = false;
        this.syncInProgress = false;
    }

    /**
     * Kh·ªüi t·∫°o scheduler
     */
    async init() {
        if (this.isInitialized) {
            console.log('‚ö†Ô∏è Forecast scheduler already initialized');
            return;
        }

        try {
            console.log('üîÑ Initializing forecast scheduler...');

            // ƒêƒÉng k√Ω c√°c cron jobs
            await this.setupCronJobs();

            // ƒêƒÉng k√Ω sample stations n·∫øu ch∆∞a c√≥
            await this.initializeSampleStations();

            this.isInitialized = true;
            console.log('‚úÖ Forecast scheduler initialized successfully');

        } catch (error) {
            console.error('‚ùå Error initializing forecast scheduler:', error.message);
            throw error;
        }
    }

    /**
     * Thi·∫øt l·∫≠p c√°c cron jobs
     */
    async setupCronJobs() {
        // Job 1: Sync d·ªØ li·ªáu m·ªói gi·ªù (minute 0)
        const hourlySync = cron.schedule('0 * * * *', async () => {
            console.log('üïê Running hourly forecast data sync...');
            await this.runHourlySync();
        }, {
            scheduled: false,
            timezone: 'Asia/Ho_Chi_Minh'
        });

        // Job 2: Sync d·ªØ li·ªáu m·ªói 4 gi·ªù (minute 0, hours 0,4,8,12,16,20)
        const fourHourlySync = cron.schedule('0 */4 * * *', async () => {
            console.log('üïê Running 4-hourly comprehensive forecast sync...');
            await this.runComprehensiveSync();
        }, {
            scheduled: false,
            timezone: 'Asia/Ho_Chi_Minh'
        });

        // Job 3: Cleanup d·ªØ li·ªáu c≈© h√†ng ng√†y (02:00 AM)
        const dailyCleanup = cron.schedule('0 2 * * *', async () => {
            console.log('üßπ Running daily data cleanup...');
            await this.runDailyCleanup();
        }, {
            scheduled: false,
            timezone: 'Asia/Ho_Chi_Minh'
        });

        // Job 4: Health check m·ªói 30 ph√∫t
        const healthCheck = cron.schedule('*/30 * * * *', async () => {
            await this.runHealthCheck();
        }, {
            scheduled: false,
            timezone: 'Asia/Ho_Chi_Minh'
        });

        // L∆∞u jobs ƒë·ªÉ qu·∫£n l√Ω
        this.jobs.set('hourlySync', hourlySync);
        this.jobs.set('fourHourlySync', fourHourlySync);
        this.jobs.set('dailyCleanup', dailyCleanup);
        this.jobs.set('healthCheck', healthCheck);

        console.log('‚úÖ Cron jobs configured:');
        console.log('   - Hourly sync: 0 * * * * (every hour)');
        console.log('   - 4-hourly comprehensive sync: 0 */4 * * *');
        console.log('   - Daily cleanup: 0 2 * * * (02:00 AM)');
        console.log('   - Health check: */30 * * * * (every 30 minutes)');
    }

    /**
     * Kh√¥ng c·∫ßn kh·ªüi t·∫°o stations - ch·ªâ c√≥ 1 tr·∫°m H·ªì D·∫ßu Ti·∫øng
     */
    async initializeSampleStations() {
        console.log('‚úÖ Station ready: H·ªì D·∫ßu Ti·∫øng (613bbcf5-212e-43c5-9ef8-69016787454f)');
    }

    /**
     * Sync h√†ng gi·ªù (nhanh)
     */
    async runHourlySync() {
        if (this.syncInProgress) {
            console.log('‚ö†Ô∏è Sync already in progress, skipping hourly sync');
            return;
        }

        try {
            this.syncInProgress = true;
            const startTime = Date.now();

            // Quick sync for H·ªì D·∫ßu Ti·∫øng station - MUCNUOCHO only
            const result = await forecastHoDauTiengService.fetchData('MUCNUOCHO');
            
            let successCount = 0;
            let errorCount = 0;
            
            if (result.success) {
                successCount++;
                console.log(`‚úÖ Hourly sync: MUCNUOCHO data updated`);
            } else {
                errorCount++;
                console.error(`‚ùå Hourly sync failed`);
            }

            const duration = Date.now() - startTime;
            console.log(`‚úÖ Hourly sync completed: ${successCount} success, ${errorCount} errors, ${duration}ms`);

        } catch (error) {
            console.error('‚ùå Hourly sync failed:', error.message);
        } finally {
            this.syncInProgress = false;
        }
    }

    /**
     * Sync to√†n di·ªán m·ªói 4 gi·ªù
     */
    async runComprehensiveSync() {
        if (this.syncInProgress) {
            console.log('‚ö†Ô∏è Sync already in progress, skipping comprehensive sync');
            return;
        }

        try {
            this.syncInProgress = true;
            console.log('üîÑ Starting comprehensive forecast sync...');

            // Full sync for all parameters
            const result = await forecastHoDauTiengService.fetchAllData();

            console.log(`‚úÖ Comprehensive sync completed: ${result.successful}/${result.successful + result.failed} parameters, ${result.totalRecords} records`);

        } catch (error) {
            console.error('‚ùå Comprehensive sync failed:', error.message);
        } finally {
            this.syncInProgress = false;
        }
    }

    /**
     * Cleanup d·ªØ li·ªáu c≈© h√†ng ng√†y
     */
    async runDailyCleanup() {
        try {
            console.log('üßπ Starting daily data cleanup...');

            // X√≥a d·ªØ li·ªáu c≈© h∆°n 1 nƒÉm (tr·ª´ forecast data)  
            const result = await forecastDataRepository.deleteOldData(365);

            console.log(`‚úÖ Daily cleanup completed: ${result.deletedCount || 0} old records removed`);

            // C√≥ th·ªÉ th√™m c√°c cleanup tasks kh√°c:
            // - Compact database
            // - Clean up temp files
            // - Archive old logs

        } catch (error) {
            console.error('‚ùå Daily cleanup failed:', error.message);
        }
    }

    /**
     * Health check ƒë·ªãnh k·ª≥
     */
    async runHealthCheck() {
        try {
            // Ki·ªÉm tra d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ H·ªì D·∫ßu Ti·∫øng
            const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000);
            const recentCount = await forecastDataRepository.count({
                hc_uuid: '613bbcf5-212e-43c5-9ef8-69016787454f',
                timestamp: { $gte: twoHoursAgo }
            });

            if (recentCount > 0) {
                console.log(`üíö H·ªì D·∫ßu Ti·∫øng system healthy: ${recentCount} recent records`);
            } else {
                console.warn(`‚ö†Ô∏è H·ªì D·∫ßu Ti·∫øng system issues: no recent data`);
            }

        } catch (error) {
            console.error('‚ùå Health check failed:', error.message);
        }
    }

    /**
     * B·∫Øt ƒë·∫ßu t·∫•t c·∫£ schedulers
     */
    start() {
        if (!this.isInitialized) {
            throw new Error('Scheduler not initialized. Call init() first.');
        }

        console.log('üöÄ Starting forecast schedulers...');

        for (const [name, job] of this.jobs) {
            job.start();
            console.log(`‚úÖ Started ${name} scheduler`);
        }

        console.log('‚úÖ All forecast schedulers started');
    }

    /**
     * D·ª´ng t·∫•t c·∫£ schedulers
     */
    stop() {
        console.log('üõë Stopping forecast schedulers...');

        for (const [name, job] of this.jobs) {
            job.stop();
            console.log(`‚úÖ Stopped ${name} scheduler`);
        }

        console.log('‚úÖ All forecast schedulers stopped');
    }

    /**
     * Restart t·∫•t c·∫£ schedulers
     */
    restart() {
        this.stop();
        setTimeout(() => {
            this.start();
        }, 1000);
    }

    /**
     * L·∫•y tr·∫°ng th√°i schedulers
     */
    getStatus() {
        const status = {
            initialized: this.isInitialized,
            syncInProgress: this.syncInProgress,
            jobs: {}
        };

        for (const [name, job] of this.jobs) {
            status.jobs[name] = {
                running: job.running || false,
                scheduled: job.scheduled || false
            };
        }

        return status;
    }

    /**
     * Ch·∫°y sync manual (cho testing)
     */
    async runManualSync(type = 'comprehensive') {
        console.log(`üîÑ Running manual ${type} sync...`);

        try {
            if (type === 'hourly') {
                await this.runHourlySync();
            } else if (type === 'comprehensive') {
                await this.runComprehensiveSync();
            } else if (type === 'cleanup') {
                await this.runDailyCleanup();
            } else {
                throw new Error(`Unknown sync type: ${type}`);
            }

            console.log(`‚úÖ Manual ${type} sync completed`);
            return { success: true, message: `Manual ${type} sync completed` };

        } catch (error) {
            console.error(`‚ùå Manual ${type} sync failed:`, error.message);
            return { success: false, error: error.message };
        }
    }
}

// Export singleton instance
const forecastScheduler = new ForecastScheduler();

module.exports = {
    forecastScheduler,
    
    // Convenience functions for integration
    async initForecastScheduler() {
        await forecastScheduler.init();
        forecastScheduler.start();
        return forecastScheduler;
    },

    async stopForecastScheduler() {
        forecastScheduler.stop();
    },

    getForecastSchedulerStatus() {
        return forecastScheduler.getStatus();
    },

    async runManualForecastSync(type) {
        return await forecastScheduler.runManualSync(type);
    }
};