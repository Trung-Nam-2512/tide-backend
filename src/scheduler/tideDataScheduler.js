const cron = require('node-cron');
const { getTideRealy, getTideRealyForce } = require('../services/tideRealyService');
const Tide = require('../models/tideModel');

/**
 * Scheduler ƒë·ªÉ g·ªçi API th·ªßy tri·ªÅu th·ª±c t·∫ø theo l·ªãch tr√¨nh c·ªë ƒë·ªãnh
 * G·ªçi API m·ªói 1 gi·ªù v·ªõi force=true ƒë·ªÉ fetch to√†n b·ªô d·ªØ li·ªáu (GMT+7)
 */

// Danh s√°ch c√°c tr·∫°m c·∫ßn g·ªçi API
const STATIONS = [
    '4EC7BBAF-44E7-4DFA-BAED-4FB1217FBDA8', // V≈©ng T√†u
    // Th√™m c√°c tr·∫°m kh√°c n·∫øu c·∫ßn
];

/**
 * H√†m g·ªçi API cho t·∫•t c·∫£ c√°c tr·∫°m v·ªõi force=true
 */
const fetchAllStationsData = async (force = false) => {
    console.log('üïê B·∫Øt ƒë·∫ßu l·ªãch tr√¨nh g·ªçi API th·ªßy tri·ªÅu th·ª±c t·∫ø...');
    console.log(`‚è∞ Th·ªùi gian: ${new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' })}`);
    console.log(`üî• Force mode: ${force}`);

    const results = [];

    for (const stationCode of STATIONS) {
        try {
            console.log(`üì° ƒêang g·ªçi API cho tr·∫°m: ${stationCode} (force=${force})`);
            const result = force ? await getTideRealyForce(stationCode) : await getTideRealy(stationCode);

            if (result) {
                results.push({
                    stationCode,
                    success: true,
                    source: result.source,
                    newRecords: result.newRecords || 0,
                    totalRecords: result.data?.length || 0
                });
                console.log(`‚úÖ Tr·∫°m ${stationCode}: ${result.newRecords} records m·ªõi, ${result.data?.length} records t·ªïng`);
            } else {
                results.push({
                    stationCode,
                    success: false,
                    error: 'No data returned'
                });
                console.log(`‚ùå Tr·∫°m ${stationCode}: Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ`);
            }
        } catch (error) {
            console.error(`‚ùå L·ªói khi g·ªçi API cho tr·∫°m ${stationCode}:`, error.message);
            results.push({
                stationCode,
                success: false,
                error: error.message
            });
        }
    }

    console.log('üìä T√≥m t·∫Øt k·∫øt qu·∫£:');
    results.forEach(result => {
        if (result.success) {
            console.log(`  ‚úÖ ${result.stationCode}: ${result.newRecords} records m·ªõi (${result.source})`);
        } else {
            console.log(`  ‚ùå ${result.stationCode}: ${result.error}`);
        }
    });

    return results;
};

/**
 * H√†m l·∫•y danh s√°ch tr·∫°m t·ª´ database
 */
const loadStationsFromDB = async () => {
    try {
        const stations = await Tide.distinct('stationCode');
        if (stations.length > 0) {
            STATIONS.length = 0; // Clear array
            STATIONS.push(...stations);
            console.log(`üìã ƒê√£ t·∫£i ${stations.length} tr·∫°m t·ª´ database:`, stations);
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫£i danh s√°ch tr·∫°m t·ª´ database:', error.message);
    }
};

/**
 * Kh·ªüi t·∫°o scheduler
 */
const initScheduler = () => {
    console.log('üöÄ Kh·ªüi t·∫°o Tide Data Scheduler...');

    // T·∫£i danh s√°ch tr·∫°m t·ª´ database
    loadStationsFromDB();

    // L·ªãch tr√¨nh g·ªçi API: m·ªói 1 gi·ªù (GMT+7) - t∆∞∆°ng t·ª± H·ªì D·∫ßu Ti·∫øng
    // Cron expression: 0 * * * * (ph√∫t gi·ªù ng√†y th√°ng th·ª©)
    const cronExpression = '0 * * * *';

    console.log(`‚è∞ L·ªãch tr√¨nh: ${cronExpression} (m·ªói 1 gi·ªù GMT+7)`);
    console.log(`üî• Method: G·ªçi tr·ª±c ti·∫øp fetchAllStationsData(force=true)`);

    // T·∫°o cron job cho vi·ªác g·ªçi API v·ªõi force=true
    const job = cron.schedule(cronExpression, async () => {
        console.log('üîî ƒê√£ ƒë·∫øn gi·ªù g·ªçi API tide realy theo l·ªãch tr√¨nh!');
        await loadStationsFromDB(); // C·∫≠p nh·∫≠t danh s√°ch tr·∫°m tr∆∞·ªõc khi g·ªçi API
        await fetchAllStationsData(true); // force=true ƒë·ªÉ lu√¥n fetch m·ªõi
    }, {
        scheduled: true,
        timezone: "Asia/Ho_Chi_Minh"
    });

    // T·∫°o cron job ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch tr·∫°m m·ªói gi·ªù
    const stationUpdateJob = cron.schedule('0 * * * *', async () => {
        console.log('üîÑ C·∫≠p nh·∫≠t danh s√°ch tr·∫°m t·ª´ database...');
        await loadStationsFromDB();
    }, {
        scheduled: true,
        timezone: "Asia/Ho_Chi_Minh"
    });

    // G·ªçi API ngay l·∫≠p t·ª©c khi kh·ªüi ƒë·ªông (sau 10 gi√¢y) v·ªõi force=true
    console.log('üöÄ S·∫Ω fetch d·ªØ li·ªáu tide realy sau 10 gi√¢y...');
    setTimeout(async () => {
        console.log('üé¨ Fetch d·ªØ li·ªáu tide realy l·∫ßn ƒë·∫ßu v·ªõi force=true...');
        await loadStationsFromDB();
        await fetchAllStationsData(true); // force=true ƒë·ªÉ lu√¥n fetch m·ªõi
    }, 10000); // Delay 10 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o h·ªá th·ªëng ƒë√£ s·∫µn s√†ng

    console.log('‚úÖ Tide Data Scheduler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!');

    return { job, stationUpdateJob };
};

/**
 * D·ª´ng scheduler
 */
const stopScheduler = (job, stationUpdateJob) => {
    if (job) {
        job.stop();
        console.log('‚èπÔ∏è Tide Data Scheduler ƒë√£ ƒë∆∞·ª£c d·ª´ng.');
    }
    if (stationUpdateJob) {
        stationUpdateJob.stop();
        console.log('‚èπÔ∏è Station Update Scheduler ƒë√£ ƒë∆∞·ª£c d·ª´ng.');
    }
};

/**
 * L·∫•y th√¥ng tin tr·∫°ng th√°i scheduler
 */
const getSchedulerStatus = () => {
    return {
        isRunning: true,
        stations: STATIONS,
        schedule: '0 * * * *',
        timezone: 'Asia/Ho_Chi_Minh',
        description: 'M·ªói 1 gi·ªù GMT+7 - g·ªçi tr·ª±c ti·∫øp fetchAllStationsData(force=true)',
        method: 'Direct function call',
        force: true
    };
};

module.exports = {
    initScheduler,
    stopScheduler,
    getSchedulerStatus,
    fetchAllStationsData,
    loadStationsFromDB
};
