// x·ª≠ l√Ω c√°c api li√™n quan ƒë·∫øn th·ªßy tri·ªÅu th·ª±c t·∫ø
const axios = require('axios');
const config = require('../config/config');
const Tide = require('../models/tideModel');
const TideRealy = require('../models/tideRealyModel');
const { parseDateString, parseRawData, convertApiData, removeDuplicateData } = require('../utils/helpers');
const DatabaseUtils = require('../utils/databaseUtils');
const DataProcessingUtils = require('../utils/dataProcessingUtils');
const API_URL_TiDE_REALY = process.env.API_URL_TiDE_REALY;

// Cache ƒë·ªÉ l∆∞u th·ªùi gian g·ªçi API cu·ªëi c√πng cho m·ªói tr·∫°m
const apiCallCache = new Map();
// Cache ƒë·ªÉ l∆∞u s·ªë l·∫ßn l·ªói li√™n ti·∫øp
const errorCountCache = new Map();

// H√†m l·∫•y th·ªùi gian hi·ªán t·∫°i theo GMT+7
const getCurrentVietnamTime = () => {
    const now = new Date();
    const vietnamTime = new Date(now.getTime() + (7 * 60 * 60 * 1000)); // GMT+7
    return vietnamTime;
};

// H√†m ki·ªÉm tra xem c√≥ ph·∫£i gi·ªù g·ªçi API kh√¥ng (m·ªói 3 gi·ªù)
const isScheduledAPITime = () => {
    const now = getCurrentVietnamTime();
    const currentHour = now.getHours();
    // G·ªçi API v√†o c√°c gi·ªù: 0, 3, 6, 9, 12, 15, 18, 21
    return currentHour % 3 === 0;
};

// H√†m ki·ªÉm tra xem c√≥ c·∫ßn g·ªçi API kh√¥ng (lu√¥n g·ªçi API)
const shouldCallAPI = async (stationCode) => {
    console.log(`üöÄ Tr·∫°m ${stationCode}: Lu√¥n g·ªçi API (ƒë√£ b·ªè qua ki·ªÉm tra gi·ªù)`);
    return true; // Lu√¥n tr·∫£ v·ªÅ true ƒë·ªÉ g·ªçi API
};

// H√†m c·∫≠p nh·∫≠t th·ªùi gian g·ªçi API
const updateAPICallTime = (stationCode) => {
    apiCallCache.set(stationCode, getCurrentVietnamTime());
    // Reset error count khi th√†nh c√¥ng
    errorCountCache.set(stationCode, 0);
};

// H√†m c·∫≠p nh·∫≠t s·ªë l·∫ßn l·ªói
const updateErrorCount = (stationCode) => {
    const currentCount = errorCountCache.get(stationCode) || 0;
    errorCountCache.set(stationCode, currentCount + 1);
    console.log(`‚ùå TƒÉng error count cho tr·∫°m ${stationCode}: ${currentCount + 1}`);
};

const callExternalAPI = async (stationCode) => {
    const url = `${API_URL_TiDE_REALY}?stationcode=${stationCode}`;
    const maxRetries = 2; // s·ªë l·∫ßn th·ª≠ l·∫°i th√™m

    for (let attempt = 0; attempt <= maxRetries; attempt++) {
        try {
            console.log(`üì° G·ªçi API (l·∫ßn ${attempt + 1}): ${url}`);

            const response = await axios.post(url, {}, {
                timeout: 10000,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'Hydrology-Dashboard/1.0'
                }
            });

            // N·∫øu th√†nh c√¥ng th√¨ return lu√¥n
            if (response.status === 200) {
                console.log(`‚úÖ API response status: ${response.status}`);
                return response.data;
            }

            console.warn(`‚ö†Ô∏è API tr·∫£ v·ªÅ status ${response.status}, th·ª≠ l·∫°i...`);

        } catch (error) {
            if (attempt === maxRetries) {
                // N·∫øu l√† l·∫ßn cu·ªëi th√¨ throw l·ªói
                if (error.code === 'ECONNABORTED') {
                    throw new Error(`API timeout after 10 seconds for station ${stationCode}`);
                } else if (error.response) {
                    throw new Error(`API error ${error.response.status}: ${error.response.statusText}`);
                } else if (error.request) {
                    throw new Error(`Network error: ${error.message}`);
                } else {
                    throw new Error(`API call failed: ${error.message}`);
                }
            } else {
                console.warn(`‚ö†Ô∏è L·ªói "${error.message}", th·ª≠ l·∫°i...`);
            }
        }
    }
};


/**
 * Process and format tide realy data for database storage
 * @param {Array} rawData - Raw API data
 * @param {string} stationCode - Station code
 * @returns {Array} Processed data ready for database
 */
const processTideRealyData = (rawData, stationCode) => {
    if (!Array.isArray(rawData) || rawData.length === 0) {
        console.warn('Invalid or empty tide realy data');
        return [];
    }

    const processedData = rawData
        .map(item => {
            try {
                // Tr·ª´ ƒëi 288.5 cho V≈©ng T√†u ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô ch√≠nh x√°c
                let adjustedWaterLevel = item.GiaTri;
                if (stationCode === '4EC7BBAF-44E7-4DFA-BAED-4FB1217FBDA8') { // V≈©ng T√†u
                    adjustedWaterLevel = item.GiaTri - 288.5;
                    console.log(`üîß ƒêi·ªÅu ch·ªânh gi√° tr·ªã V≈©ng T√†u: ${item.GiaTri} -> ${adjustedWaterLevel} (tr·ª´ 288.5)`);
                }
                // else if (stationCode === 'CDO') {
                //     adjustedWaterLevel = item.GiaTri - 288.5;
                //     console.log(`üîß ƒêi·ªÅu ch·ªânh gi√° tr·ªã V≈©ng T√†u: ${item.GiaTri} -> ${adjustedWaterLevel} (tr·ª´ 288.5)`);
                // }

                return {
                    stationCode: stationCode,
                    timestamp: item.Timestamp,
                    utc: new Date(item.UTC),
                    vietnamTime: item.GioVietNam,
                    waterLevel: adjustedWaterLevel,
                    unit: 'cm',
                    dataType: 'real',
                    status: 'active'
                };
            } catch (error) {
                console.warn('Failed to process tide realy item:', item, error.message);
                return null;
            }
        })
        .filter(item => item !== null); // Remove invalid items

    console.log(`üìä Processed ${processedData.length} tide realy records from ${rawData.length} raw records`);
    return processedData;
};

const getTideRealyForce = async (stationCode) => {
    try {
        console.log(`üîÑ Force refresh cho tr·∫°m: ${stationCode}`);

        // Step 1: Call external API
        const rawData = await callExternalAPI(stationCode);

        if (!rawData || !Array.isArray(rawData)) {
            return DataProcessingUtils.createOperationResult({
                success: false,
                message: 'No valid data received from API',
                operation: 'fetch_and_save_tide_realy'
            });
        }

        console.log(`üìä API tr·∫£ v·ªÅ ${rawData.length} records`);

        // Step 2: Convert and remove duplicates from API data
        const convertedData = convertApiData(rawData);
        const uniqueData = removeDuplicateData(convertedData);
        console.log(`üìä Sau khi l·ªçc tr√πng l·∫∑p: ${uniqueData.length} records`);

        // Step 3: Process data for database
        const processedData = processTideRealyData(uniqueData, stationCode);

        if (processedData.length === 0) {
            return DataProcessingUtils.createOperationResult({
                success: false,
                message: 'No valid processed data',
                operation: 'fetch_and_save_tide_realy'
            });
        }

        // Validate processed data before database operation
        const validData = processedData.filter(item => {
            return item &&
                item.stationCode &&
                item.timestamp &&
                item.utc &&
                typeof item.waterLevel === 'number' &&
                !isNaN(item.waterLevel);
        });

        if (validData.length !== processedData.length) {
            console.warn(`‚ö†Ô∏è Filtered out ${processedData.length - validData.length} invalid records`);
        }

        if (validData.length === 0) {
            return DataProcessingUtils.createOperationResult({
                success: false,
                message: 'No valid data after validation',
                operation: 'fetch_and_save_tide_realy'
            });
        }

        console.log(`üìä Processed data ready for database: ${validData.length} records (${processedData.length} total)`);

        // Step 4: SAFE station-specific data replacement
        const dbResult = await DatabaseUtils.replaceStationData(TideRealy, stationCode, validData);

        // C·∫≠p nh·∫≠t th·ªùi gian g·ªçi API v√† reset error count
        updateAPICallTime(stationCode);
        console.log(`‚úÖ ƒê√£ force refresh v√† thay th·∫ø to√†n b·ªô d·ªØ li·ªáu cho tr·∫°m: ${stationCode}`);

        return DataProcessingUtils.createOperationResult({
            success: true,
            message: `All tide realy data completely replaced with fresh API data for station ${stationCode}`,
            operation: 'fetch_and_save_tide_realy',
            inserted: dbResult.newRecords,
            deleted: dbResult.oldRecords,
            newRecords: dbResult.newRecords,
            totalRecords: dbResult.totalRecords || processedData.length,
            dataRange: `${processedData.length} records processed`,
            rawData: uniqueData
        });

    } catch (error) {
        console.error('Error in getTideRealyForce:', error.message);
        // TƒÉng error count
        updateErrorCount(stationCode);

        throw new Error(`Failed to fetch or save tide realy data: ${error.message}`);
    }
}

const getTideRealy = async (stationCode) => {
    try {
        console.log(`üïê Ki·ªÉm tra cache cho tr·∫°m: ${stationCode}`);
        console.log(`‚è∞ Th·ªùi gian hi·ªán t·∫°i (GMT+7): ${getCurrentVietnamTime().toISOString()}`);

        // Ki·ªÉm tra xem c√≥ c·∫ßn g·ªçi API kh√¥ng (lu√¥n g·ªçi API)
        if (!(await shouldCallAPI(stationCode))) {
            const lastCallTime = apiCallCache.get(stationCode);
            console.log(`üì¶ S·ª≠ d·ª•ng cache - L·∫ßn g·ªçi API cu·ªëi: ${lastCallTime?.toISOString()}`);

            // L·∫•y d·ªØ li·ªáu t·ª´ database thay v√¨ g·ªçi API
            const cachedData = await getTideRealyFromDB(stationCode, 100);
            return {
                data: cachedData,
                source: 'cache',
                lastUpdate: lastCallTime?.toISOString() || 'unknown',
                totalRecords: cachedData.length
            };
        }

        console.log(`üîÑ C·∫ßn g·ªçi API m·ªõi cho tr·∫°m: ${stationCode}`);

        // Step 1: Call external API
        const rawData = await callExternalAPI(stationCode);

        if (!rawData || !Array.isArray(rawData)) {
            throw new Error('Invalid API response format');
        }

        console.log(`üìä API tr·∫£ v·ªÅ ${rawData.length} records`);

        // Step 2: Convert and remove duplicates from API data
        const convertedData = convertApiData(rawData);
        const uniqueData = removeDuplicateData(convertedData);
        console.log(`üìä Sau khi l·ªçc tr√πng l·∫∑p: ${uniqueData.length} records`);

        // Step 3: Process data for database
        const processedData = processTideRealyData(uniqueData, stationCode);

        if (processedData.length === 0) {
            console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ l∆∞u cho tr·∫°m: ${stationCode}`);
        } else {
            // Validate processed data before database operation
            const validData = processedData.filter(item => {
                return item &&
                    item.stationCode &&
                    item.timestamp &&
                    item.utc &&
                    typeof item.waterLevel === 'number' &&
                    !isNaN(item.waterLevel);
            });

            if (validData.length !== processedData.length) {
                console.warn(`‚ö†Ô∏è Filtered out ${processedData.length - validData.length} invalid records`);
            }

            if (validData.length > 0) {
                // Step 4: SAFE station-specific data replacement
                await DatabaseUtils.replaceStationData(TideRealy, stationCode, validData);
                console.log(`‚úÖ ƒê√£ thay th·∫ø d·ªØ li·ªáu cho tr·∫°m: ${stationCode} (station-specific)`);
            } else {
                console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá sau khi validation cho tr·∫°m: ${stationCode}`);
            }
        }

        // C·∫≠p nh·∫≠t th·ªùi gian g·ªçi API v√† reset error count
        updateAPICallTime(stationCode);

        return {
            data: uniqueData,
            source: 'api',
            lastUpdate: getCurrentVietnamTime().toISOString(),
            newRecords: processedData.length,
            totalRecords: uniqueData.length
        };
    } catch (error) {
        console.error('Error in getTideRealy:', error.message);

        // TƒÉng error count
        updateErrorCount(stationCode);

        // N·∫øu g·ªçi API l·ªói, th·ª≠ l·∫•y t·ª´ cache
        try {
            console.log(`üîÑ API l·ªói, th·ª≠ l·∫•y t·ª´ cache...`);
            const cachedData = await getTideRealyFromDB(stationCode, 50);
            return {
                data: cachedData,
                source: 'cache_fallback',
                lastUpdate: apiCallCache.get(stationCode)?.toISOString() || 'unknown',
                totalRecords: cachedData.length,
                error: error.message
            };
        } catch (cacheError) {
            console.error('Error getting from cache:', cacheError.message);
            return {
                data: [],
                source: 'error',
                error: error.message,
                totalRecords: 0,
                lastUpdate: getCurrentVietnamTime().toISOString()
            };
        }
    }
}

/**
 * Legacy function - now replaced by complete data replacement strategy
 * Keeping for backward compatibility but not actively used
 */
const saveTideRealyData = async (stationCode, data) => {
    console.warn('‚ö†Ô∏è saveTideRealyData is deprecated. Use complete replacement strategy instead.');
    // This function is now replaced by DatabaseUtils.replaceAllData() in the main flow
}

const getTideRealyFromDB = async (stationCode, limit = 100) => {
    try {
        const data = await TideRealy.getLatestData(stationCode, limit);

        // Check for duplicates before mapping
        const timestampMap = new Map();
        data.forEach((item, index) => {
            if (timestampMap.has(item.timestamp)) {
                console.warn(`‚ö†Ô∏è Duplicate timestamp found in DB: ${item.timestamp} at index ${index}`);
                console.warn(`Previous:`, timestampMap.get(item.timestamp));
                console.warn(`Current:`, item);
            } else {
                timestampMap.set(item.timestamp, item);
            }
        });

        const mappedData = data.map(item => ({
            Timestamp: item.timestamp,
            UTC: item.utc,
            GioVietNam: item.vietnamTime,
            GiaTri: item.waterLevel, // D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u trong DB d∆∞·ªõi d·∫°ng cm
            unit: 'cm'
        }));

        console.log(`üìä getTideRealyFromDB: Retrieved ${data.length} records, mapped to ${mappedData.length} records`);

        return mappedData;
    } catch (error) {
        console.error('Error getting tide realy data from DB:', error.message);
        return []; // Tr·∫£ v·ªÅ array r·ªóng thay v√¨ throw error
    }
}

const getCacheStatus = () => {
    const status = {};
    const now = getCurrentVietnamTime();

    for (const [stationCode, lastCallTime] of apiCallCache.entries()) {
        const timeDiff = now.getTime() - lastCallTime.getTime();
        const nextScheduledTime = getNextScheduledTime(lastCallTime);
        const isScheduled = isScheduledAPITime();
        const errorCount = errorCountCache.get(stationCode) || 0;

        status[stationCode] = {
            lastCallTime: lastCallTime.toISOString(),
            timeSinceLastCall: `${Math.round(timeDiff / (60 * 1000))} minutes`,
            nextScheduledCall: nextScheduledTime.toISOString(),
            isScheduledTime: isScheduled,
            shouldCallAPI: true, // Lu√¥n g·ªçi API (ƒë√£ b·ªè qua ki·ªÉm tra gi·ªù)
            errorCount: errorCount,
            isHealthy: errorCount <= 3
        };
    }

    return status;
};

// H√†m t√≠nh th·ªùi gian g·ªçi API ti·∫øp theo (m·ªói 3 gi·ªù)
const getNextScheduledTime = (lastCallTime) => {
    const now = getCurrentVietnamTime();
    const currentHour = now.getHours();

    // T√≠nh gi·ªù ti·∫øp theo chia h·∫øt cho 3
    let nextHour = Math.ceil(currentHour / 3) * 3;

    // N·∫øu gi·ªù ti·∫øp theo v∆∞·ª£t qu√° 24, reset v·ªÅ 0 gi·ªù ng√†y h√¥m sau
    if (nextHour >= 24) {
        const tomorrow = new Date(now);
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0, 0, 0, 0);
        return tomorrow;
    }

    const nextTime = new Date(now);
    nextTime.setHours(nextHour, 0, 0, 0);
    return nextTime;
};

// h√†m c·∫≠p nh·∫≠t stationcode v√†o tideModel
// h√†m nh·∫≠n v√†o 2 tham s·ªë: location v√† stationCode, n·∫øu location c√≥ trong tideModel th√¨ c·∫≠p nh·∫≠t stationCode v√†o location ƒë√≥
const updateStationCode = async (location, stationCode) => {
    try {
        const result = await Tide.updateMany(
            { location },
            { $set: { stationCode } }
        );

        if (result.matchedCount === 0) {
            return { success: false, message: 'Location not found', location, stationCode };
        }

        return {
            success: true,
            message: `Updated ${result.modifiedCount} record(s)`,
            location,
            stationCode
        };
    } catch (error) {
        console.error('‚ùå Error updating station code:', error.message);
        throw error;
    }
};

module.exports = {
    getTideRealy,
    getTideRealyForce,
    getTideRealyFromDB,
    getCacheStatus,
    updateStationCode
}